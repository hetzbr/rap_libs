<% provide(:title, "Record") %>
<!DOCTYPE html>
<html>
    <body>

<h1>Recorder.js simple WAV export example</h1>

 <div style="margin: auto;">
  <button id="record">Start</button>
  <div id='line'>|</div>
  <div id='wordtype'></div>
  <div id='syllables'></div>
 
  <h2>Log</h2>
  <pre id="log"></pre>
 </div>

  <script>
  var blanks;
  var index = -1;
  var interval;
  var numBlanks;
  function __log(e, data) {
    log.innerHTML += "\n" + e + " " + (data || '');
  }
  function newClip() {
      index += 1;
      var line = document.getElementById('line');
      line.width = blanks[index].length;
      var wordtype = document.getElementById('wordtype');
      wordtype.innerHTML = blanks[index].wordtype ;
      var syllables = document.getElementById('syllables');
      syllables.innerHTML = blanks[index].syllabuls + " syllables";
  }
  var audio_context;
  var recorder;
  var urls = [];
  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    __log('Media stream created.');
    // Uncomment if you want the audio to feedback directly
    //input.connect(audio_context.destination);
    //__log('Input connected to audio context destination.');
    
    recorder = new Recorder(input);
    __log('Recorder initialised.');
  }
  function startRecording(button) {
    recorder && recorder.record();
    button.onclick = function() { stopRecording(this); }
    button.innerHTML = "Stop";
    __log('Recording...');
    var length = blanks[index].length;
    interval = setInterval(function(){stopRecording(document.getElementById("record"));},length);
  }
  function stopRecording(button) {
    recorder && recorder.stop();
    button.onclick = function () { startRecording(this); }
    button.innerHTML = "Start";
    __log('Stopped recording.');
    
    var url = '';
    // create WAV download link using audio data blob
    recorder && recorder.exportWAV(function(blob) {
      url = URL.createObjectURL(blob);
      console.log(url);
      urls.push(url);
    });

    recorder.clear();
    clearInterval(interval);
    
    if(index < numBlanks - 1) {
      newClip();
    } else {
      interval = setInterval(function(){ end();},1000);
    }
  }
  window.onload = function init() {
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      window.URL = window.URL || window.webkitURL;
      
      audio_context = new AudioContext;
      __log('Audio context set up.');
      __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }
    
    data = "<%= @Blank %>";
    blanks = JSON.parse(data.replace(/&quot;/g,'"'));
    numBlanks = blanks.length;

    newClip();
    document.getElementById('record').onclick = function () { startRecording(this); }
    
    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      __log('No live audio input: ' + e);
    });
  };
  function end() {
    clearInterval(interval);
    console.log(urls);
    for(var index = 0; index < urls.length; index += 1) {
      console.log(typeof buffers[0]);
      loadClipSound(index);
    }
  }
  var buffers = [];
  var intervals = [];
  var songBuffer = null;
  var context = new AudioContext();
  function loadClipSound(index) {
    var url = urls[index];
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';

    // Decode asynchronously
    request.onload = function() {
      context.decodeAudioData(request.response, function(buffer) {
        buffers[index] = buffer;
        intervals[index] = setInterval(function(){ (playClip(index));},blanks[index].start_time + 1000);
      });
    }
    request.send();
  }
  function playClip(index) {
    var buffer = buffers[index];
    clearInterval(intervals[index]);
    var source = context.createBufferSource();
    source.buffer = buffer;                
    source.connect(context.destination);       
    source.start(0);                         
  }
  </script>
  </body>
</html>
